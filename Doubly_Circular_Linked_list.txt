#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>

struct node
{
	int data;
	struct node *next;
	struct node *prev;
};
struct node *head, *tail, *newnode, *temp;

void create_list();
void display();
int get_length();
void insert_at_beginning();
void insert_at_end();
void insert_at_position(int v);
void delete_at_beginning();
void delete_at_end();
void delete_at_position(int v);

int main()
{
	int select;
	printf("\n\t\t\tDOUBLY CIRCULAR LINKED LIST PROGRAMME");
	printf("\n\t\t\t****-----------------------------****\n");  
	
    printf("\nCreation of Doubly Circular Linked List: \n");
	create_list();
	printf("\nThe Linked List is :- \n");
	display();
	int v = get_length();
	
	do
	{
	printf("\nChoose from below:\n1.Insert\n2.Delete\n3.Display\n4.Length\n0.Exit\n");
	scanf("%d", &select);
	if(select == 1)
		{
			int x;
			printf("\nSelect any one:\n1.Insert at beginning \n2.Insert at end \n3.Insert at any position \n");
			scanf("%d", &x);
			switch(x)
			{
				case 1:
					{
	  					insert_at_beginning();
	  					break;
	  			    }
	  			case 2:
	  				{
						insert_at_end();	
						break;
					}
				case 3:
					{
						insert_at_position(v);
						break;
					}
				default:
					{
						printf("Invalid Choice\n");
						break;
					}
			}
	    }
	else if(select == 2)
		{
			int y;
			printf("\nSelect any one:\n1.Delete at beginning \n2.Delete at end \n3.Delete at any position \n");
			scanf("%d", &y);
			switch(y)
			{
				case 1:
					{
	  					delete_at_beginning();
	  					break;
	  			    }
	  			case 2:
	  				{
						delete_at_end();	
						break;
					}
				case 3:
					{
						delete_at_position(v);
						break;
					}
				default:
					{
						printf("Invalid Choice\n");
						break;
					}
			}
		}
	else if(select == 3)
		{
			printf("The linked list is : \n");
			display();
		}
	else if(select == 4)
		{
			get_length();
		}
	}
	while(select != 0);
	
	printf("EXIT PROGRAM \n");
	return 0;
}

void create_list()
{
	int choice = 1;
	head = 0;
	while(choice)
	{	
		newnode=(struct node*)malloc(sizeof(struct node));
		printf("Enter data: \n");
		scanf("%d", &newnode->data);
		newnode->prev = 0;
		newnode->next = 0;
		if(head == 0)
		{
			head = tail=newnode;
			head->next = head;
			head->prev = head;
		}	
		else
		{
			tail->next = newnode;
			newnode->prev = tail;
			newnode->next = head;
			head->prev = newnode;
			tail = newnode;
		}
		fflush(stdin);
		printf("Do you want to contine(0/1)? \n");
		scanf("%d", &choice);
	}	
}

void display()
{
	temp = head;
	if(head == 0)
	{
		printf("List is empty \n");
	}
	else
	{
		while(temp->next != tail->next)
		{
			printf("%d <=> ", temp->data);
			temp = temp->next;
		}
		printf("%d <=> ", temp->data);
	}
	printf("NULL\n");
}

int get_length()
{
	int count = 0;
	temp = head;
	while(temp != tail)
	{
		temp = temp->next;
		count++;
	}
	printf("The length is %d \n", count+1);
}

void insert_at_beginning()
{
	newnode=(struct node*)malloc(sizeof(struct node));
	printf("Enter data to insert at beginning\n");
	scanf("%d", &newnode->data);
	if (head == 0)
	{
		head = tail=newnode;
		newnode->prev = tail;
		newnode->next = head;
	}
	else
	{
		newnode->next = head;
		head->prev = newnode;
		newnode->prev = tail;
		tail->next = newnode;
		head = newnode;
	}
}

void insert_at_end()
{
	newnode = (struct node*)malloc(sizeof(struct node));
	printf("Enter data to insert at end\n");
	scanf("%d", &newnode->data);
	if (head == 0)
	{
		head = tail = newnode;
		newnode->prev = tail;
		newnode->next = head;
	}
	else
	{
		newnode->prev = head;
		tail->next = newnode;
		newnode->next = head;
		head->prev = newnode;
		tail = newnode;
	}
}

void insert_at_position(int v)
{
	int pos,i = 1;
	temp = head;
	printf("Enter the position at which you want to insert:\n");
	scanf("%d", &pos);
	if(pos < 1 && pos > v)
	{
		printf("Invalid position\n");
	}
	else if(pos == 1)
	{
		insert_at_beginning();
	}		
	else
	{		
		newnode=(struct node*)malloc(sizeof(struct node));
		printf("Enter data to insert at position\n");
		scanf("%d", &newnode->data);	
		while(i < pos-1)
		{
			temp = temp->next;
			i++;
		}
		
		newnode->prev = temp;
		newnode->next = temp->next;
		temp->next->prev = newnode;
		temp->next = newnode;
	}
}

void delete_at_beginning()
{
	temp = head;
	if(head == 0)
	{
		printf("List is empty\n");
	}
	else if(head->next == head)
	{
		head = tail = 0;
		free(temp);
	}
	else
	{
		head = head->next;
		head->prev = tail;
		tail->next = head;
		free(temp);
	}
}

void delete_at_end()
{
	printf("Delete at end function\n");
	temp = tail;
	if(head == 0)
	{
		printf("List is empty\n");
	}
	else if(head->next == head)
	{
		head = tail = 0;
		free(temp);
	}
	else
	{
		tail = tail->prev;
		tail->next = head;
		head->prev = tail;
		free(temp);
	}
}

void delete_at_position(int v)
{
	int pos, i = 1;
	temp = head;
	printf("Enter the position at which you want to delete:\n");
	scanf("%d", &pos);
	if(pos < 1 && pos > v)
	{
		printf("Invalid position\n");
	}
	else if(pos == 1)
	{
		delete_at_beginning();
	}	
	else
	{
		while(i < pos)
		{
			temp = temp->next;
			i++;
		}
		temp->prev->next = temp->next;
		temp->next->prev = temp->prev;
		if(temp->next == head)
		{
			tail = temp->prev;
			free(temp);
		}
		else
		{
			free(temp);
		}
	}		
}
