#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>

struct node
{
	int data;
	struct node *next;
	struct node *prev;
};
struct node *head, *tail, *newnode, *temp;

void create_list();
void display();
void insert_at_beginning(int data);
void insert_at_end(int data);
void insert_at_position(int v, int data);
void insert_after_position(int v, int data);
void delete_at_beginning();
void delete_at_end();
void delete_at_position();
int get_length();
void reverse_list();

int main()
{
    	int data, select; 
	head=0, tail=0;
	
	printf("\n\t\t\tDOUBLY LINKED LIST PROGRAMME");
	printf("\n\t\t\t****--------------------****\n");  
	
    	printf("\nCreation of Doubly Linked List: \n");
	create_list();
	printf("\nThe Linked List is :- \n");
	display();
	int v = get_length();
	
	do
	{
	printf("\nChoose from below:\n1.Insert\n2.Delete\n3.Display\n4.Reverse\n5.Length\n");
	scanf("%d", &select);
	if(select == 1)
		{
			int x;
			printf("\nSelect any one:\n1.Insert at beginning \n2.Insert at end \n3.Insert at any position \n4.Insert after any position \n");
			scanf("%d", &x);
			switch(x)
			{
				case 1:
					{
						printf("\nEnter data to insert at beginning of the list: \n");
    					scanf("%d", &data);
	  					insert_at_beginning(data);
	  					break;
	  			    }
	  			case 2:
	  				{
	  					printf("\nEnter data to insert at end of the list: \n");
   						scanf("%d", &data);
						insert_at_end(data);	
						break;
					}
				case 3:
					{
						printf("\nEnter data to insert at position of the list: \n");
    					scanf("%d", &data);
						insert_at_position(v, data);
						break;
					}
				case 4:
					{
						printf("\nEnter data to insert after position of the list: \n");
    					scanf("%d", &data);
						insert_after_position(v, data);
						break;
					}
				default:
					{
						printf("Invalid Choice\n");
						break;
					}
			}
	    }
	else if(select == 2)
		{
			int y;
			printf("\nSelect any one:\n1.Delete at beginning \n2.Delete at end \n3.Delete at any position \n");
			scanf("%d", &y);
			switch(y)
			{
				case 1:
					{
	  					delete_at_beginning();
	  					break;
	  			    }
	  			case 2:
	  				{
						delete_at_end();	
						break;
					}
				case 3:
					{
						delete_at_position();
						break;
					}
				default:
					{
						printf("Invalid Choice\n");
						break;
					}
			}
		}
	else if(select == 3)
		{
			printf("The linked list is : \n");
			display();
		}
	else if(select == 4)
		{
			printf("The reverse list is :\n");
			reverse_list();
			display();
		}
	else if(select == 5)
		{
			get_length();
		}
	}
	while(select != 0);
	printf("\n");
	printf("EXIT PROGRAM \n");
	return 0;
}

void create_list()
{
	int v, choice = 1;
	while(choice)
	{	
		newnode = (struct node*)malloc(sizeof(struct node));
		printf("Enter data: \n");
		scanf("%d", &newnode->data);
		newnode->prev = 0;
		newnode->next = 0;
		if(head == 0)
		{
			head = tail = newnode;
		}	
		else
		{
			tail->next = newnode;
			newnode->prev = tail;
			tail = newnode;
		}
		fflush(stdin);
		printf("Do you want to contine(0/1)? \n");
		scanf("%d", &choice);
	}	
}

void insert_at_beginning(int data)
{
		
	newnode = (struct node*)malloc(sizeof(struct node));
	newnode->data = data;
	newnode->prev = 0;
	newnode->next = 0;
	head->prev = newnode;
	newnode->next = head;
	head = newnode;
}

void insert_at_end(int data)
{
	newnode = (struct node*)malloc(sizeof(struct node));
	newnode->data = data;
	newnode->prev = tail;
	newnode->next = 0;
	tail->next = newnode;
	tail = newnode;
}

void insert_at_position(int v,int data)
{
	int pos,i = 1;
	printf("Enter the position at which you want to insert:\n");
	scanf("%d", &pos);
	if(pos < 1 && pos > v)
	{
		printf("Invalid position\n");
	}
	else if(pos == 1)
	{
		insert_at_beginning(data);
		display();
	}		
	else
	{		
		temp = head;
		newnode = (struct node*)malloc(sizeof(struct node));
		newnode->data = data;
		while(i < pos-1)
		{
			temp = temp->next;
			i++;
		}
		
		newnode->prev = temp;
		newnode->next = temp->next;
		temp->next = newnode;
		newnode->next->prev = newnode;
	}
}

void insert_after_position(int v, int data)
{
	int pos,i = 1;
	printf("Enter the position at which you want to insert:\n");
	scanf("%d", &pos);
	if(pos < 1 || pos > v)
	{
		printf("Invalid position\n");
	}
	else
	{		
		temp = head;
		newnode = (struct node*)malloc(sizeof(struct node));
		newnode->data = data;
		while(i < pos)
		{
			temp = temp->next;
			i++;
		}
		
		newnode->prev = temp;
		newnode->next = temp->next;
		temp->next = newnode;
		newnode->next->prev = newnode;
	}
}

void delete_at_beginning()
{
	temp = head;
	if(head == 0)
	{
		printf("Delete is not possible\n");
	}
	else
	{
	temp = head;
	head = head->next;
	head->prev = 0;
	free(temp);
	}
}

void delete_at_end()
{
	if(tail == 0)
	{
		printf("Delete is not possible \n");
	}
	else
	{
		temp = tail;
		tail->prev->next = 0;
		tail = tail->prev;
		free(temp);
	}
}

void delete_at_position()
{
	struct node *current;
	int pos, i = 1;
	printf("Enter into delete_at_any_position Function\n");
	temp = head;
	printf("Enter the position at which you want to delete :\n");
	scanf("%d", &pos);
	while(i < pos)
	{
		temp = temp->next;
		i++;
	}
	temp->prev->next = temp->next;
	temp->next->prev = temp->prev;
	free(temp);
}		

void reverse_list()
{
	struct node *current, *nextnode;
	if(head == 0)
	{
		printf("No list to reverse\n");
	}
	else
	{
		current = head;
		while(current != 0)
		{
			nextnode = current->next;
			current->next = current->prev;
			current->prev = nextnode;
			current = nextnode;
		}
		current = head;
		head = tail;
		tail = current;		
	}
}

void display()
{
	if(head == 0)
	{
		printf("List is empty \n");
	}
	else
	{
		temp = head;
		while(temp != 0)
		{
			printf("%d <=> ", temp->data);
			temp = temp->next;
		}
	}
	printf("NULL\n");
}

int get_length()
{
	int count = 0;
	temp = head;
	while(temp != 0)
	{
		temp = temp->next;
		count++;
	}
	printf("The Length of linked list is : %d",count);
}
