#include<stdio.h>
#include<stdlib.h>

struct node
{
	int data;
	struct node *next;
};
struct node *front=0;
struct node *rear=0;

void enqueue(int data)
{
	struct node *newnode;
	newnode = (struct node*)malloc(sizeof(struct node));
	newnode->data = data;
	newnode->next = 0;
	if(rear == 0)
	{
		front = rear = newnode;
		rear->next = front;
	}
	else
	{
		rear->next = newnode;
		rear = newnode;
		rear->next = front;
	}
}

void dequeue()
{
	struct node *temp;
	temp = front;
	if(front == 0 && rear == 0)
	{
		printf("Underflow\n");
	}
	else if(front == rear)
	{
		front = rear = 0;
		free(temp);
	}
	else
	{
		printf("\nThe dequeued value is %d\n", front->data);
		rear->next = front;
		free(temp);
	}
}

void peek()
{
	if(front == 0 && rear == 0)
	{
		printf("Queue is empty\n");
	}
	else
	{
		printf("\nThe top value is %d\n", front->data);
	}
}

void  display()
{
	struct node *temp;
	temp = front;
	if(front == 0 && rear == 0)
	{
		printf("Queue is empty\n");
	}
	else
	{
		printf("\nThe data values of Queue are: \n");
		while(temp->next != front )
		{
			printf("%d\t", temp->data);
			temp = temp->next;
		}
		printf("%d",temp->data);
	}
}

int main()
{
	int data, choice;
	printf("\n\t\t\tCIRCULAR QUEUE OPERATIONS USING LINKED LIST");
	printf("\n\t\t\t****-----------------------------------****");
	
	do
	{
		printf("\nEnter choice:\n1.Enqueue\t2.Dequeue\t3.Peek\t4.Display\t0.Exit\n");
		scanf("%d", &choice);
		{
			switch(choice)
			{
				case 1:
					printf("Enter the data to be enqueued: \n");
					scanf("%d", &data);
					enqueue(data);
					break;
					
				case 2:
					dequeue();
					break;
					
				case 3:
					peek();
					break;
					
				case 4:
					display();
					break;
					
				default:
					printf("Wrong Choice\n");
			}
		}
	}
	while(choice != 0);
	
	printf("Exit Programme\n");
	return 0;
}