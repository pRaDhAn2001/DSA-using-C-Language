
#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>

struct node
{
	int data;
	struct node *next;
};
struct node *newnode, *temp, *tail;

void create_list();
void display();
int get_length();
void insert_at_beginning();
void insert_at_end();
void insert_at_position(int v);
void delete_at_beginning();
void delete_at_end();
void delete_at_position(int v);
void reverse_list();

int main()
{
	int select;
	printf("\n\t\t\tCIRCULAR LINKED LIST PROGRAMME");
	printf("\n\t\t\t****----------------------****\n");  
	
    printf("\nCreation of Circular Linked List: \n");
	create_list();
	printf("\nThe Linked List is :- \n");
	display();
	int v = get_length();
	do
	{
	printf("\nChoose from below:\n1.Insert\n2.Delete\n3.Display\n4.Reverse\n5.Length\n");
	scanf("%d", &select);
	if(select == 1)
		{
			int x;
			printf("\nSelect any one:\n1.Insert at beginning \n2.Insert at end \n3.Insert at any position \n");
			scanf("%d", &x);
			switch(x)
			{
				case 1:
					{
	  					insert_at_beginning();
	  					break;
	  			    }
	  			case 2:
	  				{
						insert_at_end();	
						break;
					}
				case 3:
					{
						insert_at_position(v);
						break;
					}
				default:
					{
						printf("Invalid Choice\n");
						break;
					}
			}
	    }
	else if(select == 2)
		{
			int y;
			printf("\nSelect any one:\n1.Delete at beginning \n2.Delete at end \n3.Delete at any position \n");
			scanf("%d", &y);
			switch(y)
			{
				case 1:
					{
	  					delete_at_beginning();
	  					break;
	  			    }
	  			case 2:
	  				{
						delete_at_end();	
						break;
					}
				case 3:
					{
						delete_at_position(v);
						break;
					}
				default:
					{
						printf("Invalid Choice\n");
						break;
					}
			}
		}
	else if(select == 3)
		{
			printf("The linked list is : \n");
			display();
		}
	else if(select == 4)
		{
			printf("The reverse list is :\n");
			reverse_list();
			display();
		}
	else if(select == 5)
		{
			get_length();
		}
	}
	while(select != 0);
	
	printf("EXIT PROGRAM \n");
	return 0;
}

void create_list()
{
	tail = 0;
	int choice = 1;
	while(choice)
	{
		newnode = (struct node*)malloc(sizeof(struct node));
		printf("Enter data: \n");
		scanf("%d", &newnode->data);
		newnode->next = 0;
		if(tail == 0)
		{
			tail = newnode;
			tail->next = newnode;
		}
		else
		{
			newnode->next = tail->next;
			tail->next = newnode;
			tail = newnode;
		}
		fflush(stdin);
		printf("Do you want to continue(0/1)? \n");
		scanf("%d", &choice);
	}
}

void display()
{
	if(tail == 0)
	{
		printf("List is empty\n");
	}
	else
	{
		temp = tail->next;
		while(temp->next != tail->next)
		{
		printf("%d => ", temp->data);
		temp = temp->next;
		}
		printf("%d \n", temp->data);
	}
}

int get_length()
{
	int count = 0;
	temp = tail->next;
	while(temp->next != tail->next)
	{
		temp = temp->next;
		count++;
	}
	printf("The length is %d \n", count+1);
}

void insert_at_beginning()
{
	newnode = (struct node*)malloc(sizeof(struct node));
    printf("Enter data to insert at beginning of the list: \n");
   	scanf("%d", &newnode->data);
	newnode->next = 0;
	if(tail == 0)
	{
		tail = newnode;
		tail->next = newnode;
	}
	else
	{
		newnode->next = tail->next;
		tail->next = newnode;
	}
}

void insert_at_end()
{
	newnode = (struct node*)malloc(sizeof(struct node));
    printf("Enter data to insert at end of the list: \n");
   	scanf("%d", &newnode->data);
	newnode->next = 0;
	if(tail == 0)
	{
		tail = newnode;
		tail->next = newnode;
	}
	else
	{
		newnode->next = tail->next;
		tail->next = newnode;
		tail = newnode;
	}
}

void insert_at_position(int v)
{
		int pos, i = 1;
		printf("Enter the position at which you want to insert :\n");
		scanf("%d", &pos);
		if(pos < 1 || pos > v)
		{
			printf("Invalid Position\n");
		}
		else if(pos == 1)
		{
			insert_at_beginning();
		}
		else
		{
			newnode = (struct node*)malloc(sizeof(struct node));
			printf("Enter data to insert at position of the list: \n");
			scanf("%d", &newnode->data);
			newnode->next = 0;
			temp = tail->next;
			while(i < pos)
			{
				temp = temp->next;
				i++;
			}
			newnode->next = temp->next;
			temp->next = newnode;
		}
}

void delete_at_beginning()
{
	temp = tail->next;
	if(tail == 0)
	{
		printf("List is empty\n");
	}
	else if(temp->next == temp)
	{
		tail = 0;
		free(temp);
	}
	else
	{
		tail->next = temp->next;
		free(temp);
	}
}

void delete_at_end()
{
	struct node *current, *prev;
	current = tail->next;
	if(tail == 0)
	{
		printf("List is empty\n");
	}
	else if(current->next == current)
	{
		tail = 0;
		free(current);
	}
	else
	{
		while(current->next != tail->next)
		{
			prev = current;
			current = current->next;
		}
		prev->next = tail->next;
		tail = prev;
		free(current);
	}
}

void delete_at_position(int v)
{
	struct node *current, *nextnode;
	int i = 1, pos;
	current = tail->next;
	printf("Enter position at which you want to delete\n");
	scanf("%d", &pos);
	if(pos < 1 || pos > v)
	{
		printf("Invalid Position\n");
	}
	else if(pos == 1)
	{
		delete_at_beginning();
	}
	else
	{
		while(i < pos-1)
		{
			current = current->next;
			i++;
		}
		nextnode = current->next;
		current->next = nextnode->next;
		free(nextnode);
	}
}

void reverse_list()
{
	struct node *current, *nextnode, *prev;
	current = tail->next;
	nextnode = current->next;
	if(tail == 0)
	{
		printf("List is empty\n");
	}
	else
	{
		while(current != tail)
		{
			prev = current;
			current = nextnode;
			nextnode = current->next;
			current->next = prev;
		}
		nextnode->next = tail;
		tail = nextnode;
	}
}