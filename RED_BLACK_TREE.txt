#include <stdio.h>
#include <stdlib.h>

#define RED 0
#define BLACK 1

struct node
{
	int key;
	int color;
	struct node *parent;
	struct node *left;
	struct node *right;
};

struct node *ROOT;
struct node *LEAF;

void left_rotate(struct node *x);
void right_rotate(struct node *x);
void tree_print(struct node *x);
void red_black_insert(int key);
void red_black_insert_fixup(struct node *z);
struct node *tree_search(int key);
struct node *tree_minimum(struct node *x);
void red_black_transplant(struct node *u, struct node *v);
void red_black_delete(struct node *z);
void red_black_delete_fixup(struct node *x);

int main(){

	printf("\t\t\tRED BLACK TREE PROGRAMME\t\t\t\n");
	printf("\t\t\t****----------------****\t\t\t\n");
	int N, key, choice;
	LEAF = (struct node *)malloc(sizeof(struct node));
	LEAF->color = BLACK;

	ROOT = LEAF;
	
	printf("\nEnter number of elements(size of tree): \n");
	scanf("%d", &N);
	printf("\nEnter tree data:\n");
	while(N--){
		scanf("%d", &key);
		red_black_insert(key);
	}
	printf("\n");
	tree_print(ROOT);
	do
	{
		printf("\n1)Insert:");
		printf("\n2)Delete:");
		printf("\n3)Print:");
		printf("\n4)Quit:");
		printf("\n\nEnter Your Choice:");
		scanf("%d", &choice);
		
		switch(choice)
		{
						
			case 1: printf("\nEnter a data to insert:");
					scanf("%d", &key);
					red_black_insert(key);
					break;
					
			case 2: printf("\nEnter a data to delete:");
					scanf("%d", &key);
					red_black_delete(tree_search(key));
					break;
			
			case 3: printf("\nDisplay Tree:\n");
					tree_print(ROOT);
					printf("\n");
					break;	
					
			default:
					printf("Wrong Choice\n");		
		}
	}
	while(choice != 4);
	return 0;
}

void tree_print(struct node *x){
	if(x != LEAF){
		tree_print(x->left);
		printf("%d\t", x->key);
		tree_print(x->right);
	}
}

struct node *tree_search(int key){
	struct node *x;

	x = ROOT;
	while(x != LEAF && x->key != key){
		if(key < x->key){
			x = x->left;
		}
		else{
			x = x->right;
		}
	}

	return x;
}

struct node *tree_minimum(struct node *x){
	while(x->left != LEAF){
		x = x->left;
	}
	return x;
}

void red_black_insert(int key){
	struct node *z, *x, *y;
	z = (struct node*)malloc(sizeof(struct node));

	z->key = key;
	z->color = RED;
	z->left = LEAF;
	z->right = LEAF;

	x = ROOT;
	y = LEAF;

	while(x != LEAF){
		y = x;
		if(z->key <= x->key){
			x = x->left;
		}
		else{
			x = x->right;
		}
	}

	if(y == LEAF){
		ROOT = z;
	}
	else if(z->key <= y->key){
		y->left = z;
	}
	else{
		y->right = z;
	}

	z->parent = y;

	red_black_insert_fixup(z);
}

void red_black_insert_fixup(struct node *z){
	while(z->parent->color == RED){

		if(z->parent->parent->right != NULL && z->parent->parent->right->color == RED){

			if(z->parent->parent->right->color == RED){
				z->parent->color = BLACK;
				z->parent->parent->right->color = BLACK;
				z->parent->parent->color = RED;
				z = z->parent->parent;
			}

			else{
			
				if(z == z->parent->right){
					z = z->parent;
					left_rotate(z);
				}

				z->parent->color = BLACK;
				z->parent->parent->color = RED;
				right_rotate(z->parent->parent);
			}
		}

		else{
			
			if(z->parent->parent->left != NULL && z->parent->parent->left->color == RED){
				z->parent->color = BLACK;
				z->parent->parent->left->color = BLACK;
				z->parent->parent->color = RED;
				z = z->parent->parent;
			}

			else{
				
				if(z == z->parent->left){
					z = z->parent;
					right_rotate(z);
				}

				z->parent->color = BLACK;
				z->parent->parent->color = RED;
				left_rotate(z->parent->parent);
			}
		}
	}

	ROOT->color = BLACK;
}

void left_rotate(struct node *x){
	struct node *y;

	y = x->right;
	x->right = y->left;
	if(y->left != LEAF){
		y->left->parent = x;
	}
	
	y->parent = x->parent;
	if(y->parent == LEAF){
		ROOT = y;
	}
	else if(x == x->parent->left){
		x->parent->left = y;
	}
	else{
		x->parent->right = y;
	}

	y->left = x;
	x->parent = y;
}

void right_rotate(struct node *x){
	struct node *y;
	
	y = x->left;
	x->left = y->right;
	if(y->right != LEAF){
		y->right->parent = x;
	}

	y->parent = x->parent;
	if(y->parent == LEAF){
		ROOT = y;
	}
	else if(x == x->parent->left){
		x->parent->left = y;	
	}
	else{
		x->parent->right = y;
	}

	y->right = x;
	x->parent = y;
}

void red_black_delete(struct node *z){
	struct node *y, *x;
	int yOriginalColor;

	y = z;
	yOriginalColor = y->color;

	if(z->left == LEAF){
		x = z->right;
		red_black_transplant(z, z->right);
	}
	else if(z->right == LEAF){
		x = z->left;
		red_black_transplant(z, z->left);
	}
	else{
		y = tree_minimum(z->right);
		yOriginalColor = y->color;

		x = y->right;

		if(y->parent == z){
			x->parent = y;
		}
		else{
			red_black_transplant(y, y->right);
			y->right = z->right;
			y->right->parent = y;
		}

		red_black_transplant(z, y);
		y->left = z->left;
		y->left->parent = y;
		y->color = z->color;
	}

	if(yOriginalColor == BLACK){
		red_black_delete_fixup(x);
	}
}

void red_black_delete_fixup(struct node *x){
	struct node *w;	

	while(x != ROOT && x->color == BLACK){
		
		if(x == x->parent->left){
			w = x->parent->right;

			if(w->color == RED){
				w->color = BLACK;
				x->parent->color = RED;
				left_rotate(x->parent);
				w = x->parent->right;
			}

			if(w->left->color == BLACK && w->right->color == BLACK){
				w->color = RED;
				x->parent->color = BLACK;
				x = x->parent;
			}
			else{

				if(w->right->color == BLACK){
					w->color = RED;
					w->left->color = BLACK;
					right_rotate(w);
					w = x->parent->right;
				}

				w->color = x->parent->color;
				x->parent->color = BLACK;
				x->right->color = BLACK;
				left_rotate(x->parent);
				x = ROOT;		

			}

		}
		else{
			w = x->parent->left;

			if(w->color == RED){
				w->color = BLACK;
				x->parent->color = BLACK;
				right_rotate(x->parent);
				w = x->parent->left;
			}

			if(w->left->color == BLACK && w->right->color == BLACK){
				w->color = RED;
				x->parent->color = BLACK;
				x = x->parent;
			}
			else{

				if(w->left->color == BLACK){
					w->color = RED;
					w->right->color = BLACK;
					left_rotate(w);
					w = x->parent->left;
				}

				w->color = x->parent->color;
				x->parent->color = BLACK;
				w->left->color = BLACK;
				right_rotate(x->parent);
				x = ROOT;

			}
		}

	}

	x->color = BLACK;
}

void red_black_transplant(struct node *u, struct node *v){
	if(u->parent == LEAF){
		ROOT = v;
	}
	else if(u == u->parent->left){
		u->parent->left = v;
	}
	else{
		u->parent->right = v;
	}

	v->parent = u->parent;
}